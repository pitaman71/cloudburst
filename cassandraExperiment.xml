<hive name="CassandraExperiment">
    <struct name="RecommendedEC2ConfigForDSEGDemo">
        <variable name="region" type="string">us-east-2</variable>
        <describe locale="en-US">The recommended cluster configuration in EC2 for a DSEG development or demo exercise</describe>
        <referenceDoc><url>https://docs.google.com/document/d/1IWGEkeJQy82lFBZhXm0CgS5wUO5oHqq3AWv4y3XwcGw/edit#heading=h.30j0zll</url></referenceDoc>
        <struct name="analyticNodes" type="EC2GroupConfiguration">
            <variable name="numNodes" type="int">6</variable>
            <variable name="image" type="string">ami-f7290c92</variable>
            <variable name="instanceType" type="string">m4.large</variable>
            <variable name="instancePrefix" type="string">ANode</variable>
            <variable name="region" type="string">us-east-2</variable>
            <variable name="networkAdapterName" type="string">enet0</variable>
            <variable name="securityGroupId" type="string">sg-12d46d7b</variable>
            <variable name="isCassandraNode" type="bool">True</variable>
            <variable name="isOpsCenterNode" type="bool">False</variable>
            <variable name="isJanusGraphNode" type="bool">False</variable>
        </struct>
        <struct name="transactionalNodes" type="EC2GroupConfiguration">
            <variable name="numNodes" type="int">6</variable>
            <variable name="image" type="string">ami-f7290c92</variable>
            <variable name="instanceType" type="string">m4.large</variable>
            <variable name="instancePrefix" type="string">TNode</variable>
            <variable name="region" type="string">us-east-2</variable>
            <variable name="networkAdapterName" type="string">enet0</variable>
            <variable name="securityGroupId" type="string">sg-12d46d7b</variable>
            <variable name="isCassandraNode" type="bool">True</variable>
            <variable name="isOpsCenterNode" type="bool">False</variable>
            <variable name="isJanusGraphNode" type="bool">False</variable>
        </struct>
        <struct name="opsNode" type="EC2GroupConfiguration">
            <variable name="numNodes" type="int">1</variable>
            <variable name="image" type="string">ami-f7290c92</variable>
            <variable name="instanceType" type="string">m4.large</variable>
            <variable name="instancePrefix" type="string">OpsNode</variable>
            <variable name="region" type="string">us-east-2</variable>
            <variable name="networkAdapterName" type="string">enet0</variable>
            <variable name="securityGroupId" type="string">sg-12d46d7b</variable>
            <variable name="isCassandraNode" type="bool">False</variable>
            <variable name="isOpsCenterNode" type="bool">True</variable>
            <variable name="isJanusGraphNode" type="bool">False</variable>
        </struct>
    </struct>
    <struct name="JanusGraphClusterDemo">
        <variable name="region" type="string">us-east-2</variable>
        <describe locale="en-US">The recommended cluster configuration in EC2 for a Janusgraph development or demo exercise</describe>
        <struct name="dbNodes" type="EC2GroupConfiguration">
            <variable name="numNodes" type="int">3</variable>
            <variable name="image" type="string">ami-f7290c92</variable>
            <variable name="instanceType" type="string">m4.large</variable>
            <variable name="instancePrefix" type="string">JGCSNode</variable>
            <variable name="region" type="string">us-east-2</variable>
            <variable name="networkAdapterName" type="string">enet0</variable>
            <variable name="securityGroupId" type="string">sg-12d46d7b</variable>
            <variable name="isJanusGraphNode" type="bool">True</variable>
        </struct>
    </struct>
    <struct name="i-02e3afedc1a92b410" type="EC2Node">
        <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Alan's personal account</describe>
        <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">54.89.82.240</variable>
        <struct name="credentials" type="SSHCredentials">
            <describe locale="en-US">SSH/TLS username and certificate</describe>
            <variable name="user" type="username">ec2-user</variable>
            <struct name="privateKey" type="SSLCertificate">
                <variable name="localFilePath" type="localFilePath">~/.ssh/CassandraExperiment1.pem</variable>
            </struct>
        </struct>
    </struct>
    <struct name="i-0375a11f5e322ee0d" type="EC2Node">
        <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Alan's personal account</describe>
        <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.23.220.50</variable>
        <struct name="credentials" type="SSHCredentials">
            <describe locale="en-US">SSH/TLS username and certificate</describe>
            <variable name="user" type="username">ec2-user</variable>
            <struct name="privateKey" type="SSLCertificate">
                <variable name="localFilePath" type="localFilePath">~/.ssh/CassandraExperiment1.pem</variable>
            </struct>
        </struct>
    </struct>
    <struct name="DSEDemoCluster" type="EC2Cluster">
        <struct name="credentials" type="SSHCredentials">
            <describe locale="en-US">SSH/TLS username and certificate</describe>
            <variable name="user" type="username">ubuntu</variable>
            <struct name="privateKey" type="SSLCertificate">
                <variable name="localFilePath" type="localFilePath">~/.ssh/expero-us-east-2.pem</variable>
            </struct>
        </struct>
        <struct name="budget">
            <struct name="LargeNode" type="EC2Node">
                <variable name="budget">4</variable>
            </struct>
        </struct>
        <struct name="allocated">
            <struct name="TNode0" type="EC2Node">
                <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Expero corporate account</describe>
                <variable name="instance" type="string">i-05af501073923f7ce</variable>
                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.14.52.56</variable>
            </struct>
            <struct name="TNode1" type="EC2Node">
                <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Expero corporate account</describe>
                <variable name="instance" type="string">i-068acbba609252604</variable>
                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.14.100.138</variable>
            </struct>
            <struct name="TNode2" type="EC2Node">
                <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Expero corporate account</describe>
                <variable name="instance" type="string">i-02aeeb57787d459dd</variable>
                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.14.75.181</variable>
            </struct>
            <struct name="TNode3" type="EC2Node">
                <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Expero corporate account</describe>
                <variable name="instance" type="string">i-00c68b14a1691f57e</variable>
                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.14.99.7</variable>
            </struct>
            <struct name="SNode0" type="EC2Node">
                <describe locale="en-US">Manually created EC2 node for testing purposes, billed to Expero corporate account</describe>
                <variable name="instance" type="string">i-0959911e46c66a28a</variable>
                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address">52.14.81.63</variable>
            </struct>
        </struct>
    </struct>
    <goalProto name="test1" symbol="goal">
        <variable name="selector" type="int"/>
        <pre><defined><get>goal.selector</get></defined></pre>
    </goalProto>
    <method name="test1isTrue" targetGoalType="test1" goalSymbol="goal">
        <pre><get>goal.selector</get></pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <get>goal.selector</get>
        </do>
    </method>
    <method name="test1isFalse" targetGoalType="test1" goalSymbol="goal">
        <pre><op name="not"><get>goal.selector</get></op></pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <op name="not"><get>goal.selector</get></op>
        </do>
    </method>
    <goalProto name="setupCassandraNode" symbol="goal">
        <describe locale="en-US">Configure EC2 node to run the Datastax Enterprise Graph Example</describe>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <variable name="seeds" type="EC2Instances"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
        <pre><defined><get>goal.dseCreds.user</get></defined></pre>
        <pre><defined><get>goal.dseCreds.password</get></defined></pre>
    </goalProto>
    <goalProto name="startCassandraNode" symbol="goal">
        <describe locale="en-US">Start the Datastax Enterprise Graph service</describe>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="isCassandraNode" type="bool"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
    </goalProto>
    <goalProto name="startOpsCenterNode" symbol="goal">
        <describe locale="en-US">Start the Datastax Enterprise Graph service</describe>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <variable name="isOpsCenterNode" type="bool"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
        <pre><defined><get>goal.dseCreds.user</get></defined></pre>
        <pre><defined><get>goal.dseCreds.password</get></defined></pre>
    </goalProto>
    <goalProto name="stopCassandraNode" symbol="goal">
        <describe locale="en-US">Stop the Datastax Enterprise Graph service</describe>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
    </goalProto>
    <goalProto name="retireCassandraNode" symbol="goal">
        <describe locale="en-US">Dismantle EC2 node configuration</describe>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
    </goalProto>
    <goalProto name="installDSEGLoader" symbol="goal">
        <describe locale="en-US">Install (optional) DSEG Loader tool</describe>
        <variable name="workDir" type="localFilePath"/>
        <variable name="node" type="EC2Node"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <pre><defined><get>goal.sshCreds.user</get></defined></pre>
        <pre><defined><get>goal.node.publicIP</get></defined></pre>
        <pre><defined><get>goal.node.privateIP</get></defined></pre>
        <pre><defined><get>goal.sshCreds.privateKey.localFilePath</get></defined></pre>
        <pre><defined><get>goal.dseCreds.user</get></defined></pre>
        <pre><defined><get>goal.dseCreds.password</get></defined></pre>
    </goalProto>
    <method name="setupCassandraNodeOverSSHFromLinuxToEC2" targetGoalType="setupCassandraNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <DISABLE-pre>
            <op name="eq"><get>host.uname</get><string>Linux</string></op>
        </DISABLE-pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <tempFile name="dataStaxYumRepo">
                <describe locale="en_US">Create temp file with YUM repository entry for datastax</describe>
[datastax]
name = DataStax Repo for DataStax Enterprise
baseurl=https://<get>goal.dseCreds.user</get>:<python name="urllib.quote_plus"><get>goal.dseCreds.password</get></python>@rpm.datastax.com/enterprise
enabled=1
gpgcheck=0
            </tempFile>
            <shell>
                <describe locale="en_US">Copy YUM repository entry file to <get>goal.node.publicIP</get> using scp</describe>
                <label>cpYumConfigForDatastax</label>
                <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.dataStaxYumRepo</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get>:datastax.repo
                </send>
            </shell>
            <shell>
                <describe locale="en_US">Make sure YUM program is installed on <get>goal.node.publicIP</get> using apt-get</describe>
                <label>installYum</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo apt-get --assume-yes install yum*</send>
            </shell>
            <shell>
                <describe locale="en_US">Move datastax YUM repo to /etc using sudo</describe>
                <label>copyDSEReposFile</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo cp ~<get>goal.sshCreds.user</get>/datastax.repo /etc/yum/repos.d/</send>
            </shell>
            <shell>
                <describe locale="en_US">Make sure Java 1.8 is installed on <get>goal.node.publicIP</get> using yum</describe>
                <label>installJava1.8</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo apt-add-repository ppa:webupd8team/java -y</send>
                <send name="command" onFail="stop">sudo apt-get update</send>
                <send name="command" onFail="stop">echo debconf shared/accepted-oracle-license-v1-1 select true | sudo debconf-set-selections</send>
                <send name="command" onFail="stop">echo debconf shared/accepted-oracle-license-v1-1 seen true | sudo debconf-set-selections</send>
                <send name="command" onFail="stop">sudo apt-get install oracle-java8-installer -y</send>
                <send name="command" onFail="stop">sudo java -version</send>
            </shell>
            <shell>
                <describe locale="en_US">Make sure DSE full product package is installed on <get>goal.node.publicIP</get> using yum</describe>
                <label>installDSE</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo apt-get install dse-full -y</send>
            </shell>

            <do>
                <describe locale="en_US">Adjust cassandra.yaml to match best practice initial values on <get>goal.node.publicIP</get></describe>
                <shell>
                    <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get>:/etc/dse/cassandra/cassandra.yaml cassandra.yaml.original</send>
                </shell>
                <python>
                    <code>
import re
fin = open('cassandra.yaml.original','r')
fout = open('cassandra.yaml.fixed','w')
seedString = ','.join([instance.private_ip_address for instance in <set>goal.seeds</set>])
for line in fin:
    # using private IP for seeds causes "Unable to gossip with any seeds" failure
    line = re.sub('- seeds: "\S+"','- seeds: "%s"' % seedString,line)
    line = re.sub('listen_address: \S+','listen_address: <get>goal.node.privateIP</get>',line)
    line = re.sub('broadcast_rpc_address: \S+','broadcast_rpc_address: <get>goal.node.privateIP</get>',line)
    # using public IP for rpc_address causes binding failure
    line = re.sub('^rpc_address: \S+','rpc_address: 0.0.0.0',line)
    line = re.sub('\# num_tokens:.*','num_tokens: 32',line)
    # documentation says use fully-qualified Java class names for authenticator and authorizer, but that causes "class not found" failure 
    line = re.sub('authenticator:.*','authenticator: PasswordAuthenticator',line)
    line = re.sub('authorizer:.*','authorizer: CassandraAuthorizer',line)
    fout.write(line)
                    </code>
                </python>
                <shell>
                    <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> cassandra.yaml.fixed <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get>:</send>
                </shell>
                <shell>
                    <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                    <send name="command" onFail="stop">sudo mv cassandra.yaml.fixed /etc/dse/cassandra/cassandra.yaml</send>
                </shell>
            </do>



            <do>
                <describe locale="en_US">Adjust cassandra-env.sh to match best practice initial values on <get>goal.node.publicIP</get></describe>
                <shell>
                    <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get>:/etc/dse/cassandra/cassandra-env.sh cassandra-env.sh.original</send>
                </shell>
                <python>
                    <referenceDoc><url>https://www.liquidweb.com/kb/error-failed-to-connect-to-127-0-0-17199-connection-refused-cassandra-solved/</url></referenceDoc>
                    <code>
import re
fin = open('cassandra-env.sh.original','r')
fout = open('cassandra-env.sh.fixed','w')
for line in fin:
    line = line.decode('utf8')
    line = re.sub('\# JVM_OPTS="\$JVM_OPTS -Djava.rmi.server.hostname=.*"','JVM_OPTS="$JVM_OPTS -Djava.rmi.server.hostname=<get>goal.node.publicIP</get>"',line)
    fout.write(line)
                    </code>
                </python>
                <shell>
                    <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> cassandra-env.sh.fixed <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get>:</send>
                </shell>
                <shell>
                    <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                    <send name="command" onFail="stop">sudo mv cassandra-env.sh.fixed /etc/dse/cassandra/cassandra-env.sh</send>
                </shell>
            </do>
        </do>
    </method>
    <method name="startCassandraLocally" targetGoalType="startCassandraNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <pre>
            <op name="eq"><get>host.hostip</get><get>goal.node.publicIP</get></op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <shell>
                <label>startDSEService</label>
                <send name="command">sudo service dse start</send>
            </shell>
        </do>
    </method>
    <method name="startCassandraNodeOverSSHToEC2" targetGoalType="startCassandraNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <pre>
            <get>goal.isCassandraNode</get>
            <op name="ne"><get>host.hostip</get><get>goal.node.publicIP</get></op>
            <op name="or">
                <op name="eq"><get>host.uname</get><string>Linux</string></op>
                <op name="eq"><get>host.uname</get><string>Darwin</string></op>
            </op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <shell>
                <label>startDSEService</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo apt install datastax-agent</send>
                <send name="command" onFail="stop">sudo service dse start</send>
                <send name="command" onFail="stop">sudo service dse restart</send>
                <send name="command" onFail="stop">sudo service datastax-agent start</send>
            </shell>
        </do>
    </method>
    <method name="stopCassandraNodeOverSSHFromLinuxToEC2" targetGoalType="stopCassandraNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <pre>
            <op name="ne"><get>host.hostip</get><get>goal.node.publicIP</get></op>
            <op name="or">
                <op name="eq"><get>host.uname</get><string>Linux</string></op>
                <op name="eq"><get>host.uname</get><string>Darwin</string></op>
            </op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <shell>
                <label>stopDSEService</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo service dse stop</send>
            </shell>
        </do>
    </method>
    <method name="retireCassandraNodeOverSSHFromLinuxToEC2" targetGoalType="retireCassandraNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <pre>
            <op name="ne"><get>host.hostip</get><get>goal.node.publicIP</get></op>
            <op name="or">
                <op name="eq"><get>host.uname</get><string>Linux</string></op>
                <op name="eq"><get>host.uname</get><string>Darwin</string></op>
            </op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <shell>
                <label>uninstallDSE</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo yum -y remove dse-full</send>
            </shell>
        </do>
    </method>
    <method name="skipCassandraNode" targetGoalType="startCassandraNode" goalSymbol="goal">
        <describe locale="en-US">Cassandra will not run on this node</describe>
        <pre>
            <op name="not"><get>goal.isCassandraNode</get></op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
    </method>
    <method name="skipOpsCenterNode" targetGoalType="startOpsCenterNode" goalSymbol="goal">
        <describe locale="en-US">OpsCenter will not run on this node</describe>
        <pre>
            <op name="not"><get>goal.isOpsCenterNode</get></op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
    </method>
    <method name="startOpsCenterNodeOverSSHToEC2" targetGoalType="startOpsCenterNode" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <pre>
            <get>goal.isOpsCenterNode</get>
            <op name="ne"><get>host.hostip</get><get>goal.node.publicIP</get></op>
            <op name="or">
                <op name="eq"><get>host.uname</get><string>Linux</string></op>
                <op name="eq"><get>host.uname</get><string>Darwin</string></op>
            </op>
        </pre>
        <referenceDoc><url>http://docs.datastax.com/en/datastax_enterprise/5.0/datastax_enterprise/install/installRHELdse.html</url></referenceDoc>
        <do>
            <shell>
                <label>startOpsCenterService</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo apt install opscenter</send>
                <send name="command" onFail="stop">sudo service opscenterd start</send>
            </shell>
        </do>
    </method>
    <method name="installDSEGLoaderOverSSHFromLinuxToEC2" targetGoalType="installDSEGLoader" goalSymbol="goal">
        <describe locale="en-US">by sending shell commands to the EC2 host over SSH one at a time</describe>
        <referenceDoc><url>https://docs.datastax.com/en/latest-dse/datastax_enterprise/graph/dgl/dglInstall.html</url></referenceDoc>
        <do>
            <shell>
                <label>installLoader</label>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>goal.sshCreds.privateKey.localFilePath</get> <get>goal.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">mkdir -p <get>goal.workDir</get></send>
                <send name="command" onFail="stop">cd <get>goal.workDir</get></send>
                <send name="command" onFail="stop">wget --user <get>goal.dseCreds.user</get> --password <get>goal.dseCreds.password</get> https://downloads.datastax.com/enterprise/dse-graph-loader.tar.gz</send>
                <send name="command" onFail="stop">tar xvfz dse-graph-loader.tar.gz</send>
                <send name="command" onFail="stop">find . -type f</send>
            </shell>
        </do>
    </method>
    <goalProto name="installHomebrew" symbol="goal">
        <describe locale="en-US">Ensure that Homebrew is installed on host</describe>
        <pre><op name="eq"><get>host.uname</get><string>Darwin</string></op></pre>
        <post><op name="isZero"><shell value="returnCode"><send name="command" onFail="stop">which brew</send></shell></op></post>
    </goalProto>
    <method name="installHomebrew" targetGoalType="installHomebrew" symbol="goal">
        <describe locale="en-US">using ruby command</describe>
        <referenceDoc><url>http://brew.sh</url></referenceDoc>
        <do>
            <shell>
                <label>install</label>
                <send name="command" onFail="stop">/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</send>
            </shell>
        </do>
    </method>
    <goalProto name="installUNIXTool" symbol="goal">
        <describe locale="en-US">Ensure that <get>goal.toolName</get> is installed via Mac OS X Homebrew</describe>
        <variable name="toolName" type="programName"/>
        <post><op name="isZero"><shell value="returnCode"><send name="command" onFail="stop">which <get>goal.toolName</get></send></shell></op></post>
    </goalProto>
    <method name="installToolViaAptGet" targetGoalType="installUNIXTool" symbol="goal">
        <pre><op name="eq"><get>host.uname</get><string>Linux</string></op></pre>
        <describe locale="en-US">using apt-get command</describe>
        <do>
            <shell>
                <label>install</label>
                <send name="command" onFail="stop">sudo apt-get install <get>goal.toolName</get></send>
            </shell>
        </do>
    </method>
    <method name="installToolViaHomebrew" targetGoalType="installUNIXTool" symbol="goal">
        <pre><op name="eq"><get>host.uname</get><string>Darwin</string></op></pre>
        <pre><goalCompleted name="installHomebrew"/></pre>
        <describe locale="en-US">using brew command</describe>
        <referenceDoc><url>http://brew.sh</url></referenceDoc>
        <do>
            <shell>
                <label>install</label>
                <send name="command" onFail="stop">brew install <get>goal.toolName</get></send>
            </shell>
        </do>
    </method>
    <goalProto name="installToolViaPIP" symbol="goal">
        <describe locale="en-US">Ensure that <get>goal.toolName</get> is installed via Python PIP</describe>
        <variable name="toolName" type="programName"/>
        <post><op name="isZero"><shell value="returnCode"><send name="command">pip show <get>goal.toolName</get></send></shell></op></post>
    </goalProto>
    <method name="installToolViaPIP" targetGoalType="installToolViaPIP" symbol="goal">
        <describe locale="en-US">using pip</describe>
        <do>
            <shell name="doShell">
                <label>install</label>
                <send name="command" onFail="stop">pip install <get>goal.toolName</get> --ignore-installed</send>
            </shell>
        </do>
    </method>
    <goalProto name="installEC2CLITools" symbol="goal">
        <describe locale="en-US">Ensure host has Amazon EC2 command line API installed</describe>
        <post><fileTest type="exists">ec2</fileTest></post>
    </goalProto>
    <method name="installEC2CLIToolsViaWget" targetGoalType="installEC2CLITools" goalSymbol="goal">
        <pre><goalCompleted name="installUNIXTool"><variable name="toolName">wget</variable></goalCompleted></pre>
        <do>
            <shell>
                <label>fetchZipfile</label>
                <send name="command" onFail="stop">wget http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip</send>
            </shell>
            <shell>
                <label>unzipAndInstall</label>
                <send name="command" onFail="stop">mkdir -p ec2</send>
                <send name="command" onFail="stop">unzip ec2-api-tools.zip -d ec2</send>
            </shell>
        </do>
    </method>
    <method name="installEC2CLIToolsViaCurl" targetGoalType="installEC2CLITools" goalSymbol="goal">
        <pre><goalCompleted name="installCurl"/></pre>
        <do>
            <shell>
                <label>fetchZipfile</label>
                <send name="command" onFail="stop">curl -O http://s3.amazonaws.com/ec2-downloads/ec2-api-tools.zip</send>
            </shell>
            <shell>
                <label>unzipAndInstall</label>
                <send name="command" onFail="stop">mkdir -p ec2</send>
                <send name="command" onFail="stop">unzip ec2-api-tools.zip -d ec2</send>
            </shell>
        </do>
    </method>
    <goalProto name="installAnyJava" symbol="goal">
        <describe locale="en-US">Ensure host has JDK installed</describe>
        <pre><op name="isZero"><shell value="returnCode"><send name="command" onFail="stop">which java</send></shell></op></pre>
    </goalProto>
    <method name="installJavaByProbe" symbol="goal" targetGoalType="installAnyJava">
        <do><shell><send name="command" onFail="stop">java -version</send></shell></do>
    </method>
    <goalProto name="generateSSHKeypair" symbol="goal">
        <describe locale="en-US">Generate a public-private key pair in a known file path</describe>
        <struct name="sshCreds" type="SSHKeypair">
            <variable name="user" type="username">ubuntu</variable>
            <variable name="keyName" type="string"/>
            <struct name="privateKey" type="SSLCertificate">
                <variable name="localFilePath" type="localFilePath">ssh_private_key.rsa</variable>
            </struct>
            <struct name="publicKey" type="SSLCertificate">
                <variable name="localFilePath" type="localFilePath">ssh_public_key.rsa</variable>
            </struct>
        </struct>
    </goalProto>
    <method name="generateSSHKeypair" symbol="goal" targetGoalType="generateSSHKeypair">
        <do>
            <python>
                <code>
import uuid
<set>goal.sshCreds.keyName</set> = str(uuid.uuid4())
                </code>
            </python>
            <shell>
                <send>rm -f <get>goal.sshCreds.privateKey.localFilePath</get></send>
                <send>ssh-keygen -t rsa -f <get>goal.sshCreds.privateKey.localFilePath</get> -q -N "" </send>
                <send>chmod 400 <get>goal.sshCreds.privateKey.localFilePath</get></send>
                <send>mv <get>goal.sshCreds.privateKey.localFilePath</get>.pub <get>goal.sshCreds.publicKey.localFilePath</get></send>
            </shell>
        </do>
    </method>
    <goalProto name="ProvisionEC2Cluster" symbol="goal">
        <describe locale="en-US">Allocate a cluster of EC2 nodes</describe>
        <variable name="clusterName" type="string"/>
        <variable name="config" type="EC2ClusterConfiguration"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="ec2Creds" type="EC2Credentials"/>
        <variable name="dseCreds" type="PasswordCredentials"/>        
        <variable name="cluster" type="EC2Cluster"/>
        <variable name="analyticInstances" type="EC2Instances"/>
        <variable name="transactionalInstances" type="EC2Instances"/>
        <variable name="opsInstances" type="EC2Instances"/>
        <variable name="seeds" type="EC2Instances"/>
        <pre><defined><get>goal.config</get></defined></pre>
        <pre><defined><get>goal.ec2Creds</get></defined></pre>
        <pre><defined><get>goal.clusterName</get></defined></pre>
    </goalProto>
    <method name="ProvisionEC2Cluster" symbol="goal" targetGoalType="ProvisionEC2Cluster">
        <pre><goalCompleted name="installToolViaPIP"><variable name="toolName">boto3</variable></goalCompleted></pre>
        <pre><goalCompleted name="installEC2CLITools"/></pre>
        <pre><goalCompleted name="installAnyJava"/></pre>
        <do><goalCompleted name="generateSSHKeypair">
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
        </goalCompleted></do>
        <python>
            <code>
import boto3
botoSession = boto3.session.Session(region_name='<get>goal.config.region</get>',aws_access_key_id='<get>goal.ec2Creds.accessKey</get>',aws_secret_access_key='<get>goal.ec2Creds.secretKey</get>')
botoResource = botoSession.resource('ec2')
bfile = open('<get>goal.sshCreds.publicKey.localFilePath</get>','rb')
botoResource.import_key_pair(KeyName='<get>goal.sshCreds.keyName</get>',PublicKeyMaterial=bfile.read())
<set>goal.seeds</set> = []
<set>goal.analyticInstances</set> = []
<set>goal.transactionalInstances</set> = []
<set>goal.opsInstances</set> = []
</code>
        </python>
        <do><goalCompleted name="AllocateEC2Group">
            <variable name="clusterName"><get>goal.clusterName</get></variable>
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.analyticNodes</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.analyticInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
        <do><goalCompleted name="AllocateEC2Group">
            <variable name="clusterName"><get>goal.clusterName</get></variable>
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.transactionalNodes</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.transactionalInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
        <do><goalCompleted name="AllocateEC2Group">
            <variable name="clusterName"><get>goal.clusterName</get></variable>
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.opsNode</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.opsInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
        <do><python>
                <describe locale="en-US">Wait 300s for apt-get repositories on EC2 images to stabilize</describe>
                <code>
import time
time.sleep(300)
                </code>
        </python></do>
        <do><goalCompleted name="ConfigureEC2Group">
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.analyticNodes</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.analyticInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
        <do><goalCompleted name="ConfigureEC2Group">
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.transactionalNodes</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.transactionalInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
        <do><goalCompleted name="ConfigureEC2Group">
            <variable name="config" type="EC2GroupConfiguration"><get>goal.config.opsNode</get></variable>
            <variable name="sshCreds"><get>goal.sshCreds</get></variable>
            <variable name="ec2Creds"><get>goal.ec2Creds</get></variable>
            <variable name="dseCreds"><get>goal.dseCreds</get></variable>
            <variable name="instances"><get>goal.opsInstances</get></variable>
            <variable name="seeds"><get>goal.seeds</get></variable>
        </goalCompleted></do>
    </method>
    <goalProto name="AllocateEC2Group" symbol="goal">
        <describe locale="en-US">Allocate a cluster of EC2 nodes</describe>
        <variable name="clusterName"><get>goal.clusterName</get></variable>
        <variable name="config" type="EC2GroupConfiguration"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="ec2Creds" type="EC2Credentials"/>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <variable name="instances" type="EC2Instances"/>
        <variable name="seeds" type="EC2Instances"/>
        <pre><defined><get>goal.clusterName</get></defined></pre>
        <pre><defined><get>goal.config</get></defined></pre>
        <pre><defined><get>goal.ec2Creds</get></defined></pre>
    </goalProto>
    <method name="AllocateEC2Group" symbol="goal" targetGoalType="AllocateEC2Group">
        <pre><goalCompleted name="installToolViaPIP"><variable name="toolName">boto3</variable></goalCompleted></pre>
        <pre><goalCompleted name="installEC2CLITools"/></pre>
        <pre><goalCompleted name="installAnyJava"/></pre>
        <do>
            <python>
                <code>
import boto3
botoSession = boto3.session.Session(region_name='<get>goal.config.region</get>',aws_access_key_id='<get>goal.ec2Creds.accessKey</get>',aws_secret_access_key='<get>goal.ec2Creds.secretKey</get>')
botoResource = botoSession.resource('ec2')
instances = botoResource.create_instances(KeyName='<get>goal.sshCreds.keyName</get>',InstanceType='<get>goal.config.instanceType</get>',ImageId='<get>goal.config.image</get>', MinCount=<get>goal.config.numNodes</get>, MaxCount=<get>goal.config.numNodes</get>,NetworkInterfaces=[dict(DeviceIndex=0,Groups=['<get>goal.config.securityGroupId</get>'],AssociatePublicIpAddress=True)])
if <get>goal.config.isCassandraNode</get>:
    <set>goal.seeds</set>.append(instances[0])
index = 0
for instance in instances:
    instance.wait_until_running()
    instance.load()
    instanceName = '<get>goal.config.instancePrefix</get>%d' % index
    instance.create_tags(Tags=[{'Key':'Name','Value':instanceName},{'Key':'experoOwner','Value':'<get>goal.ec2Creds.user</get>'},{'Key':'experoClusterName','Value':'<get>goal.clusterName</get>'}])
    <set>goal.instances</set>.append(instance)
    index += 1
                </code>
            </python>
        </do>
    </method>




    <goalProto name="ConfigureEC2Group" symbol="goal">
        <describe locale="en-US">Allocate a cluster of EC2 nodes</describe>
        <variable name="config" type="EC2GroupConfiguration"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="ec2Creds" type="EC2Credentials"/>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <variable name="instances" type="EC2Instances"/>
        <variable name="seeds" type="EC2Instances"/>
        <pre><defined><get>goal.config</get></defined></pre>
        <pre><defined><get>goal.ec2Creds</get></defined></pre>
    </goalProto>
    <method name="ConfigureEC2Group" symbol="goal" targetGoalType="ConfigureEC2Group">
        <pre><goalCompleted name="installToolViaPIP"><variable name="toolName">boto3</variable></goalCompleted></pre>
        <pre><goalCompleted name="installEC2CLITools"/></pre>
        <pre><goalCompleted name="installAnyJava"/></pre>
        <do>
            <find symbol="instance">
                <in><get>goal.instances</get></in>
                <do>
                    <goalCompleted name="setupCassandraNode">
                        <struct name="node" type="EC2Node">
                            <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                            <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                            <struct name="credentials" type="SSHKeypair">
                                <variable name="user" type="username">ubuntu</variable>
                                <struct name="privateKey" type="SSLCertificate">
                                    <get>goal.sshCreds.privateKey</get>
                                </struct>
                            </struct>
                        </struct>
                        <variable name="seeds"><get>goal.seeds</get></variable>
                        <variable name="sshCreds"><get>goal.sshCreds</get></variable>
                        <variable name="dseCreds"><get>goal.dseCreds</get></variable>
                    </goalCompleted>
                    <goalCompleted name="startCassandraNode">
                        <variable name="isCassandraNode" type="bool"><get>goal.config.isCassandraNode</get></variable>
                        <variable name="isOpsCenterNode" type="bool"><get>goal.config.isOpsCenterNode</get></variable>
                        <struct name="node" type="EC2Node">
                            <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                            <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                            <struct name="credentials" type="SSHKeypair">
                                <variable name="user" type="username">ubuntu</variable>
                                <struct name="privateKey" type="SSLCertificate">
                                    <get>goal.sshCreds.privateKey</get>
                                </struct>
                            </struct>
                        </struct>
                        <variable name="sshCreds"><get>goal.sshCreds</get></variable>
                    </goalCompleted>
                    <goalCompleted name="startOpsCenterNode">
                        <variable name="isCassandraNode" type="bool"><get>goal.config.isCassandraNode</get></variable>
                        <variable name="isOpsCenterNode" type="bool"><get>goal.config.isOpsCenterNode</get></variable>
                        <struct name="node" type="EC2Node">
                            <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                            <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                            <struct name="credentials" type="SSHKeypair">
                                <variable name="user" type="username">ubuntu</variable>
                                <struct name="privateKey" type="SSLCertificate">
                                    <get>goal.sshCreds.privateKey</get>
                                </struct>
                            </struct>
                        </struct>
                        <variable name="sshCreds"><get>goal.sshCreds</get></variable>
                        <variable name="dseCreds"><get>goal.dseCreds</get></variable>
                    </goalCompleted>
                </do>
            </find>                
        </do>
    </method>





    <goalProto name="installDSEOpsCenter" symbol="goal">
        <describe locale="en-US">Ensure host has Datastax OpsCenter installed</describe>
        <variable name="dseCreds" type="PasswordCredentials"/>
        <pre><goalCompleted name="installUNIXTool"><variable name="toolName">wget</variable></goalCompleted></pre>
    </goalProto>
    <method name="installDSEOpsCenter" symbol="goal" targetGoalType="installDSEOpsCenter">
        <referenceDoc><url>https://docs.datastax.com/en/latest-opscenter/opsc/install/opscInstallTar_t.html</url></referenceDoc>
        <do>
            <shell>
                <send name="command" onFail="stop">wget --user <get>goal.dseCreds.user</get> --password <get>goal.dseCreds.password</get> -L http://downloads.datastax.com/enterprise/opscenter.tar.gz</send>
                <send name="command" onFail="stop">tar xvfz opscenter.tar.gz</send>
                <send name="command" onFail="stop">opscenter-*/bin/opscenter</send>
            </shell>
        </do>
    </method>
    <goalProto name="ec2KillAll" symbol="goal">
        <variable name="ec2Creds" type="EC2Credentials"/>
        <variable name="region" type="string"/>
        <pre><defined><get>goal.region</get></defined></pre>
    </goalProto>
    <method name="ec2KillAll" symbol="goal" targetGoalType="ec2KillAll">
        <do>
            <shell>
                <describe locale="en-US">Call the EC2 command-line API to obtain all instances for region <get>goal.region</get> and terminate all instances in that region</describe>
                <send>
                for ip in $($EC2_HOME/bin/ec2-describe-instances -O <get>goal.ec2Creds.accessKey</get> -W <get>goal.ec2Creds.secretKey</get> --region <get>goal.region</get> | grep INSTANCE | cut -f2); do 
                    echo 'Sending command to terminate EC2 instance ' $ip ; 
                    $EC2_HOME/bin/ec2-terminate-instances $ip -O <get>goal.ec2Creds.accessKey</get> -W <get>goal.ec2Creds.secretKey</get> --region <get>goal.region</get>; 
                done
                </send>
            </shell>
        </do>
    </method>
    <agent name="JanusGraphClusterDemo">
        <variable name="clusterName" type="string"/>
        <variable name="config" type="EC2ClusterConfiguration"/>
        <variable name="sshCreds" type="SSHKeypair"/>
        <variable name="ec2Creds" type="EC2Credentials"/>
        <variable name="cluster" type="EC2Cluster"/>
        <variable name="jgInstances" type="EC2Instances"/>
        <variable name="seeds" type="EC2Instances"/>
        <variable name="installDir" type="localFilePath">/var/hive</variable>
        <pre><defined><get>agent.config</get></defined></pre>
        <pre><defined><get>agent.ec2Creds</get></defined></pre>
        <pre><defined><get>agent.clusterName</get></defined></pre>
        <goalProto name="installJGNode">
            <variable name="node" type="EC2Node"/>
        </goalProto>
        <method name="fromGitFork" symbol="goal" targetGoalType="installJGNode">
            <shell>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send>
mkdir -p <get>agent.installDir</get>
cd <get>agent.installDir</get>
git clone https://github.com/twilmes/janusgraph
cd janusgraph
git checkout tp32-upgrade
mvn clean install -DskipTests
                </send>
            </shell>                            
        </method>
        <goalProto name="buildJGNode">
            <variable name="node" type="EC2Node"/>
        </goalProto>
        <method name="withMaven" symbol="goal" targetGoalType="buildJGNode">
            <shell>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send>
cd <get>agent.installDir</get>/janusgraph
mvn clean install -DskipTests
                </send>
            </shell>                            
        </method>
        <goalProto name="startJGNode">
            <variable name="node" type="EC2Node"/>
        </goalProto>
        <method name="usingHelperScript" symbol="goal" targetGoalType="startJGNode">
            <shell>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send>
cd <get>agent.installDir</get>
janusgraph/bin/janusgraph.sh start
                </send>
            </shell>                            
        </method>
        <goalProto name="configureJGNode">
            <variable name="node" type="EC2Node"/>
        </goalProto>
        <method name="sed" symbol="goal" targetGoalType="configureJGNode">
            <shell>
                <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get>:<get>agent.installDir</get>/janusgraph/conf/cassandra/cassandra.yaml cassandra.yaml.original</send>
            </shell>
            <python>
                <code>
import re
fin = open('cassandra.yaml.original','r')
fout = open('cassandra.yaml.fixed','w')
seedString = ','.join([instance.private_ip_address for instance in <set>agent.seeds</set>])
for line in fin:
# using private IP for seeds causes "Unable to gossip with any seeds" failure
line = re.sub('- seeds: "\S+"','- seeds: "%s"' % seedString,line)
line = re.sub('listen_address: \S+','listen_address: <get>goal.node.privateIP</get>',line)
line = re.sub('broadcast_rpc_address: \S+','broadcast_rpc_address: <get>goal.node.privateIP</get>',line)
# using public IP for rpc_address causes binding failure
line = re.sub('^rpc_address: \S+','rpc_address: 0.0.0.0',line)
line = re.sub('\# num_tokens:.*','num_tokens: 32',line)
# documentation says use fully-qualified Java class names for authenticator and authorizer, but that causes "class not found" failure 
line = re.sub('authenticator:.*','authenticator: PasswordAuthenticator',line)
line = re.sub('authorizer:.*','authorizer: CassandraAuthorizer',line)
fout.write(line)
                </code>
            </python>
            <shell>
                <send name="command" onFail="stop">scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> cassandra.yaml.fixed <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get>:</send>
            </shell>
            <shell>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send name="command" onFail="stop">sudo mv cassandra.yaml.fixed <get>agent.installDir</get>/janusgraph/conf/cassandra/cassandra.yaml</send>
            </shell>
        </method>
        <goalProto name="stopJGNode">
            <variable name="node" type="EC2Node"/>
        </goalProto>
        <method name="usingHelperScript" symbol="goal" targetGoalType="stopJGNode">
            <shell>
                <command>ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i <get>agent.sshCreds.privateKey.localFilePath</get> <get>agent.sshCreds.user</get>@<get>goal.node.publicIP</get></command>
                <send>
cd <get>agent.installDir</get>
janusgraph/bin/janusgraph.sh stop
                </send>
            </shell>                            
        </method>
        <goalProto name="setup" symbol="goal">
            <describe locale="en-US">Allocate a cluster of EC2 nodes to run JanusGraph + Cassandra</describe>
        </goalProto>
        <method name="usingBoto3" symbol="goal" targetGoalType="setup">
            <pre><goalCompleted name="installToolViaPIP"><variable name="toolName">boto3</variable></goalCompleted></pre>
            <pre><goalCompleted name="installEC2CLITools"/></pre>
            <pre><goalCompleted name="installAnyJava"/></pre>
            <do><goalCompleted name="generateSSHKeypair">
                <variable name="sshCreds"><get>agent.sshCreds</get></variable>
            </goalCompleted></do>
            <python>
                <code>
import boto3
botoSession = boto3.session.Session(region_name='<get>agent.config.region</get>',aws_access_key_id='<get>agent.ec2Creds.accessKey</get>',aws_secret_access_key='<get>agent.ec2Creds.secretKey</get>')
botoResource = botoSession.resource('ec2')
bfile = open('<get>agent.sshCreds.publicKey.localFilePath</get>','rb')
botoResource.import_key_pair(KeyName='<get>agent.sshCreds.keyName</get>',PublicKeyMaterial=bfile.read())
<set>agent.seeds</set> = []
<set>agent.jgInstances</set> = []
                </code>
            </python>
            <python>
                <describe>Request instances from EC2</describe>
                <code>
import boto3
botoSession = boto3.session.Session(region_name='<get>agent.config.region</get>',aws_access_key_id='<get>agent.ec2Creds.accessKey</get>',aws_secret_access_key='<get>agent.ec2Creds.secretKey</get>')
botoResource = botoSession.resource('ec2')
instances = botoResource.create_instances(KeyName='<get>agent.sshCreds.keyName</get>',InstanceType='<get>agent.config.instanceType</get>',ImageId='<get>agent.config.image</get>', MinCount=<get>agent.config.numNodes</get>, MaxCount=<get>agent.config.numNodes</get>,NetworkInterfaces=[dict(DeviceIndex=0,Groups=['<get>agent.config.securityGroupId</get>'],AssociatePublicIpAddress=True)])
if <get>agent.config.isCassandraNode</get>:
    <set>agent.seeds</set>.append(instances[0])
index = 0
for instance in instances:
    instance.wait_until_running()
    instance.load()
    instanceName = '<get>agent.config.instancePrefix</get>%d' % index
    instance.create_tags(Tags=[{'Key':'Name','Value':instanceName},{'Key':'experoOwner','Value':'<get>agent.ec2Creds.user</get>'},{'Key':'experoClusterName','Value':'<get>agent.clusterName</get>'}])
    <set>agent.instances</set>.append(instance)
    index += 1
                </code>
            </python>
            <python>
                <describe locale="en-US">Wait 300s for apt-get repositories on EC2 images to stabilize</describe>
                <code>
import time
time.sleep(300)
                </code>
            </python>
            <find symbol="instance">
                <describe>Install JanusGraph + Cassandra on each instance</describe>
                <in><get>agent.jgInstances</get></in>
                <do>
                    <goalCompleted name="installJGNode">
                        <struct name="node" type="EC2Node">
                            <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                            <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                        </struct>
                    </goalCompleted>
                </do>
            </find>                
            <find symbol="instance">
                <describe>Configure JanusGraph + Cassandra on each instance</describe>
                <in><get>agent.jgInstances</get></in>
                <do>
                    <goalCompleted name="configureJGNode">
                        <struct name="node" type="EC2Node">
                            <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                            <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                        </struct>
                    </goalCompleted>
                </do>
            </find>                
        </method>
        <goalProto name="start" symbol="goal">
            <describe locale="en-US">Configure a cluster of EC2 nodes to run JanusGraph + Cassandra</describe>
            <pre><defined><get>agent.config</get></defined></pre>
            <pre><defined><get>agent.ec2Creds</get></defined></pre>
        </goalProto>
        <method name="compound" symbol="goal" targetGoalType="start">
            <do>
                <find symbol="instance">
                    <in><get>agent.jgInstances</get></in>
                    <do>
                        <goalCompleted name="startJGNode">
                            <struct name="node" type="EC2Node">
                                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                                <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                            </struct>
                        </goalCompleted>
                    </do>
                </find>                
            </do>
        </method>
        <goalProto name="stop" symbol="goal">
            <describe locale="en-US">Configure a cluster of EC2 nodes to run JanusGraph + Cassandra</describe>
            <pre><defined><get>agent.config</get></defined></pre>
            <pre><defined><get>agent.ec2Creds</get></defined></pre>
        </goalProto>
        <method name="compound" symbol="goal" targetGoalType="stop">
            <do>
                <find symbol="instance">
                    <in><get>agent.jgInstances</get></in>
                    <do>
                        <goalCompleted name="stopJGNode">
                            <struct name="node" type="EC2Node">
                                <variable name="publicIP" type="usa.darpa.rfc971.ipv4address"><get>instance.public_ip_address</get></variable>
                                <variable name="privateIP" type="usa.darpa.rfc971.ipv4address"><get>instance.private_ip_address</get></variable>
                            </struct>
                        </goalCompleted>
                    </do>
                </find>                
            </do>
        </method>
    </agent>
    <agent name="helloWorld">
        <variable name="file" type="localFilePath"/>
        <variable name="count" type="int"><int>0</int></variable>
        <goalProto name="start" symbol="goal">
            <variable name="file" type="localFilePath"><get>agent.file</get></variable>
        </goalProto>
        <method name="start" symbol="goal" targetGoalType="start">
            <update><get>goal.file</get><tempFile>
                Hello, World! (write has not been called yet)
            </tempFile></update>
        </method>
        <goalProto name="print" symbol="goal">
        </goalProto>
        <method name="print" symbol="goal" targetGoalType="print">
            <shell><send>cat <get>agent.file</get></send></shell>
        </method>
        <goalProto name="increment" symbol="goal">
        </goalProto>
        <method name="increment" symbol="goal" targetGoalType="increment" debug="true">
            <update><get>agent.count</get><op name="add"><get>agent.count</get><int>1</int></op></update>
        </method>
        <goalProto name="finish" symbol="goal"/>
        <method name="finish" symbol="goal" targetGoalType="finish">
            <shell><send>rm -f <get>agent.file</get></send></shell>
        </method>
    </agent>
</hive>
